/*
 * Copyright 2021 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    minSdk = 23
    targetSdk = 33
    compileSdk = 33

    // Us
    pydroid = "26.2.1-SNAPSHOT"
    cachify = "0.2.0"
    highlander = "0.2.0"

    // Jobs
    workmanager = "2.8.0"

    // Leak Canary
    leakCanary = "2.10"

    // Logging
    timber = "5.0.1"

    // Room
    room = "2.5.0"

    // Dagger
    dagger = "2.45"

    moshi = "1.14.0"
    retrofit = "2.9.0"
    okhttp = "4.10.0"

    // Compose
    compose_version = "1.3.3"
    compose_compiler_version = "1.4.2"
    composeActivity = "1.6.1"
    composeMaterial = "1.3.1"
    accompanist = "0.28.0"
    coil = "2.2.2"

    // AndroidX
    core = "1.9.0"
    fragment = "1.5.5"
    appCompat = "1.6.1"

    // Material Design
    materialDesign = "1.8.0"

    // Vico charts
    vico = "1.6.3"
  }
}


plugins {
  // Android AGP
  // https://developer.android.com/studio/build#top-level
  id 'com.android.library' version '7.4.1' apply false

  // Fix Android build cache
  // https://github.com/gradle/android-cache-fix-gradle-plugin
  id "org.gradle.android.cache-fix" version "2.6.5" apply false

  // Kotlin
  // https://developer.android.com/studio/build#top-level
  id 'org.jetbrains.kotlin.android' version "1.8.10" apply false

  // Gradle version checker
  // https://github.com/ben-manes/gradle-versions-plugin
  id 'com.github.ben-manes.versions' version '0.45.0' apply false

  // Spotless
  // https://github.com/diffplug/spotless
  id "com.diffplug.spotless" version "6.15.0" apply false
}

subprojects {
  // If this project has an Android plugin applied
  plugins.withType(com.android.build.gradle.api.AndroidBasePlugin) {
    // Apply Cache Fix
    project.apply plugin: "org.gradle.android.cache-fix"

    // Apply Kotlin and Kapt
    project.apply plugin: 'kotlin-android'
    project.apply plugin: 'kotlin-kapt'

    // Kapt flags
    kapt {
      correctErrorTypes = true
      useBuildCache = true
      mapDiagnosticLocations = true

      javacOptions {
        option("-Xlint:unchecked")
        option("-Xlint:deprecation")
        option("-Xmaxerrs", 10000)
      }
    }

    // Configure matching toolchains
    // https://kotlinlang.org/docs/gradle-configure-project.html#2c42d1dc
    kotlin {
      jvmToolchain(11)
    }
    java {
      toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
      }
    }

    dependencies {
      // Apply core library desugaring at the most recent version
      coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:2.0.2"

      // Can't kapt dagger-compiler here, must do so in every module gradle
      // or else Kotlin-Android through an error about the :app module. Odd I know.
      // kapt "com.google.dagger:dagger-compiler:$dagger"
    }
  }
}

allprojects {
  apply plugin: "com.diffplug.spotless"
  apply plugin: 'com.github.ben-manes.versions'

  repositories {
    mavenLocal()
    gradlePluginPortal()
    google()
    mavenCentral()

    // Jitpack
    maven {
      url 'https://jitpack.io'
      content {
        includeGroup("com.github.pyamsoft.pydroid")
        includeGroup("com.github.pyamsoft")
      }
    }
  }

  // Java compile show
  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.deprecation = true
  }

  // Version Plugin ignore non-stable releases
  def isNonStable = { version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
  }
  tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
      isNonStable(it.candidate.version)
    }
  }

  // Spotless plugin
  spotless {
    java {
      target "src/**/*.java"

      removeUnusedImports()
      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    kotlin {
      target "src/**/*.kt"
      ktfmt()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
    groovyGradle {
      target "*.gradle"
      greclipse()

      trimTrailingWhitespace()
      endWithNewline()
      indentWithSpaces(2)
    }
  }
}
